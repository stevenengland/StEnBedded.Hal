; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32_arduino, native, examples

; Set/override default options for each "[env:***]"
[env]
lib_deps = google/googletest@^1.10.0
check_tool = cppcheck, clangtidy
check_flags =
  # Migrate the settings to .clang-tidy as fast as https://github.com/platformio/platformio-core/issues/4186 is fixed
  clangtidy: --config-file=.clang-tidy --format-style=google --fix --export-fixes=.fixes.txt --checks=*,-google-readability-avoid-underscore-in-googletest-name,-llvm-header-guard,-llvmlibc-callee-namespace,-llvmlibc-implementation-in-namespace,-modernize-use-trailing-return-type
  cppcheck: --enable=all --std=c++11
check_skip_packages = yes

# Needed when testing dedicated libraries that have their source in src_dir instead of lib_dir
# https://docs.platformio.org/en/latest/plus/unit-testing.html#shared-code
test_build_project_src = true 

[esp32_common]
platform = espressif32
board = esp32dev
monitor_speed = 115200
test_ignore = test_native
build_flags = -std=c++11

[esp8266_common]
platform = espressif8266
board = nodemcuv2
monitor_speed = 115200
test_ignore = test_native
build_flags = -std=c++11

[env:esp32_arduino]
extends = esp32_common
framework = arduino

[env:esp8266_arduino]
extends = esp8266_common
framework = arduino

[env:native] # pio test only, pio run won't find compilable sources
platform = native
test_ignore = test_arduino
src_filter = 
 -<src/>
 +<Hal/>
lib_compat_mode = off # Must-have for external stuff like gtest!
build_flags = 
  -std=gnu++11 # use installed GNU C++11 compiler.
  -pthread # found in gtest documentation
  -Werror

[env:examples]
extends = env:esp8266_arduino
test_ignore = 
 test_native
 test_arduino
src_filter = 
  +<../examples/> # Compile examples